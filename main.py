import logging
from threading import Timer
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler,
    ContextTypes, ConversationHandler, JobQueue
)
from config import ADMIN_ID, BOT_API_TOKEN
import database

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

counter = 0
GET_PHONE = range(1)
GET_NEWS_INTERVAL = range(1)
bot_running = True
bot_simulation_mode = False
processed_photos = set()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ë–î –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
ADMINS = database.load_admins()
workers = database.load_workers()
current_worker = None

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text('<b>–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!</b>', parse_mode='HTML')

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_running:
        return
    if bot_simulation_mode:
        await update.message.reply_text("<b>üòî –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö WhatsApp –¥–ª—è –≤—ã–¥–∞—á–∏</b>", reply_to_message_id=update.message.message_id, parse_mode='HTML')
        return
    if not bot_simulation_mode and update.message.photo[-1].file_id in processed_photos:
        return
    if current_worker is not None:
        forwarded_message = await context.bot.forward_message(chat_id=current_worker, from_chat_id=update.message.chat_id, message_id=update.message.message_id)
        await send_action_buttons(context, context.bot, current_worker, forwarded_message.message_id, update.message.chat_id, update.message.message_id)
        await update.message.reply_text(f'<b>‚¨ÜÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –≤–∑—è—Ç–æ –≤ —Ä–∞–±–æ—Ç—É {workers[current_worker]}</b>', reply_to_message_id=update.message.message_id, parse_mode='HTML')
    else:
        await update.message.reply_text("<b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏.</b>", parse_mode='HTML')

async def send_action_buttons(context, bot, chat_id, message_id, user_id, photo_message_id):
    keyboard = [[InlineKeyboardButton("–í–æ—Ç—Å–∞–ø –ø–æ—Å—Ç–∞–≤–ª–µ–Ω ‚úÖ", callback_data=f"set_{message_id}_{user_id}_{photo_message_id}")], [InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä", callback_data=f"repeat_{message_id}_{user_id}_{photo_message_id}")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    action_message = await bot.send_message(chat_id=chat_id, text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:</b>", reply_markup=reply_markup, parse_mode='HTML')
    context.user_data.setdefault("action_message_ids", {}).update({user_id: action_message.message_id})

async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not bot_running:
        return
    query = update.callback_query
    await query.answer()
    action, forwarded_message_id, user_id, photo_message_id = query.data.split('_')
    for current_user_id in workers.keys():
        try:
            await context.bot.delete_message(chat_id=current_user_id, message_id=int(forwarded_message_id))
        except:
            pass
        try:
            action_message_id = context.user_data.get("action_message_ids", {}).get(current_user_id)
            if action_message_id:
                await context.bot.delete_message(chat_id=current_user_id, message_id=action_message_id)
        except:
            pass
    if action == "set":
        context.user_data.update({"forwarded_message_id": forwarded_message_id, "user_id": user_id, "photo_message_id": photo_message_id})
        await context.bot.send_message(chat_id=query.message.chat_id, text="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b>", parse_mode='HTML')
        return GET_PHONE
    elif action == "repeat":
        await context.bot.send_message(chat_id=user_id, text="<b>‚ùå –ü–æ–≤—Ç–æ—Ä</b>", reply_to_message_id=photo_message_id, parse_mode='HTML')
        await context.bot.send_message(chat_id=query.message.chat_id, text="<b>–ü–æ–≤—Ç–æ—Ä –∑–∞–ø—Ä–æ—à–µ–Ω.</b>", parse_mode='HTML')
    return ConversationHandler.END

def delete_message(bot, message):
    try:
        bot.delete_message(chat_id=message.chat_id, message_id=message.message_id)
    except:
        pass

async def cancel_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global counter
    query = update.callback_query
    await query.answer()
    _, photo_message_id = query.data.split('_')
    counter -= 1

    job = context.job_queue.get_jobs_by_name(f"delete_{photo_message_id}")[0]
    issued_phone_number = job.data["issued_phone_number"]  # –ü–æ–ª—É—á–∞–µ–º –≤—ã–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è
    status = "–°–ª–µ—Ç–µ–ª" if job else "–£—Å–ø–µ—Ö"
    message_text = f"<b>–ù–æ–º–µ—Ä: {issued_phone_number}\n–°—Ç–∞—Ç—É—Å: {status}</b>"
    if status == "–°–ª–µ—Ç–µ–ª":
        message_text += "\n<b>–¢—ã –µ–±–ª–∞–Ω, –ø–æ–¥—Å—É–Ω—É–ª —Ö—É–π–Ω—é.</b>"
    else:
        message_text += "\n<b>–°–ø–∞—Å–∏–±–æ —á—Ç–æ –Ω–µ –ø–æ–¥—Å—É–Ω—É–ª —Ö—É–π–Ω—é.</b>"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É
    await context.bot.send_message(chat_id=current_worker, text=message_text, parse_mode='HTML')

    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã –∏ –∑–∞–¥–∞–Ω–∏–µ
    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
    job.schedule_removal()


async def handle_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if bot_simulation_mode:
        return
    global counter
    phone_number = update.message.text
    user_data = context.user_data
    if user_data:
        counter += 1
        if current_worker:  
            issued_phone_number = phone_number  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
            await context.bot.send_message(chat_id=user_data["user_id"], text=f"<b>+{counter}\n–í—ã–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä: {phone_number}</b>", reply_to_message_id=user_data["photo_message_id"], parse_mode='HTML')
            await context.bot.send_message(chat_id=update.effective_user.id, text="<b>–ù–æ–º–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω!</b>", parse_mode='HTML')
            cancel_message = await context.bot.send_message(chat_id=user_data["user_id"], text="<b>–ú–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç:</b>", reply_to_message_id=user_data["photo_message_id"], reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚ùå", callback_data=f"cancel_{user_data['photo_message_id']}")]]), parse_mode='HTML')

            # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–¥–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –≤ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
            context.job_queue.run_once(delete_message, 600, data={"chat_id": user_data["user_id"], "message_id": cancel_message.message_id, "issued_phone_number": issued_phone_number}, name=f"delete_{user_data['photo_message_id']}")

            try:
                action_message_id = context.user_data.get("action_message_ids", {}).get(current_worker)
                if action_message_id:
                    await context.bot.delete_message(chat_id=current_worker, message_id=action_message_id)
            except:
                pass
            try:
                await context.bot.delete_message(chat_id=current_worker, message_id=user_data["forwarded_message_id"])
            except:
                pass
        context.user_data.clear()
        return ConversationHandler.END
    else:
        await update.message.reply_text("<b>–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.</b>", parse_mode='HTML')
        return GET_PHONE

# --- –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã ---
async def add_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global workers
    if update.effective_user.id in ADMINS or update.effective_user.id == ADMIN_ID:
        try:
            user_id = int(context.args[0])
            name = ' '.join(context.args[1:])
            if name in workers.values():
                await update.message.reply_text("–ò–º—è —É–∂–µ –∑–∞–Ω—è—Ç–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –∏–º—è.")
                return
            workers[user_id] = name
            database.add_worker(user_id, name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Å –∏–º–µ–Ω–µ–º {name} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.")
        except (IndexError, ValueError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /adduser <user_id> <name>")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


async def remove_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global workers
    if update.effective_user.id in ADMINS or update.effective_user.id == ADMIN_ID:
        try:
            user_id = int(context.args[0])
            if user_id in workers:
                del workers[user_id]
                database.remove_worker(user_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.")
            else:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ.")
        except (IndexError, ValueError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeuser <user_id>")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")



async def list_users(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id == ADMIN_ID:
        if workers:
            user_list = "\n".join([f"{user_id} - {name}" for user_id, name in workers.items()])
            await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤:\n{user_list}")
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def worker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_worker
    if update.effective_user.id == ADMIN_ID:
        try:
            name = context.args[0]
            for user_id, worker_name in workers.items():
                if worker_name == name:
                    current_worker = user_id
                    await update.message.reply_text(f"–ù–∞ —Å–º–µ–Ω—É –Ω–∞–∑–Ω–∞—á–µ–Ω {name} (ID: {user_id})")
                    return
            await update.message.reply_text("–†–∞–±–æ—Ç–Ω–∏–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except IndexError:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /worker <name>")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def remove_worker(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global current_worker
    if update.effective_user.id == ADMIN_ID:
        current_worker = None
        keyboard = [[InlineKeyboardButton("–í–∫–ª—é—á–∏—Ç—å", callback_data="enable_simulation")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–í–æ—Ä–∫–µ—Ä—ã –æ–±–Ω—É–ª–µ–Ω—ã. –ú–µ—Å—Ç–æ —Å–≤–æ–±–æ–¥–Ω–æ. –•–æ—Ç–∏—Ç–µ –≤–∫–ª—é—á–∏—Ç—å —Å–∏–º—É–ª—è—Ü–∏—é?", reply_markup=reply_markup)

async def enable_simulation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_simulation_mode
    query = update.callback_query
    await query.answer()
    bot_simulation_mode = True
    await query.edit_message_text(text="–°–∏–º—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞.")

async def start_simulation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_simulation_mode
    if update.effective_user.id == ADMIN_ID:
        bot_simulation_mode = True
        await update.message.reply_text("–°–∏–º—É–ª—è—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def stop_simulation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_simulation_mode
    if update.effective_user.id == ADMIN_ID:
        bot_simulation_mode = False
        await update.message.reply_text("–°–∏–º—É–ª—è—Ü–∏—è –≤—ã–∫–ª—é—á–µ–Ω–∞.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def start_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_running
    if update.effective_user.id == ADMIN_ID:
        bot_running = True
        await update.message.reply_text("–ë–æ—Ç –≤–∫–ª—é—á—ë–Ω.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def stop_bot(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global bot_running
    if update.effective_user.id == ADMIN_ID:
        bot_running = False
        await update.message.reply_text("–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

async def clear_count(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global counter
    if update.effective_user.id == ADMIN_ID:
        counter = 0
        await update.message.reply_text("–°—á–µ—Ç—á–∏–∫ –æ–±–Ω—É–ª–µ–Ω.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ ---
async def news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        text = " ".join(context.args)  # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–∑ –≤—Å–µ—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
        if not text:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /news <—Ç–µ–∫—Å—Ç>")
            return

        context.user_data["news_text"] = text
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª —Ä–∞—Å—Å—ã–ª–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1h, 30m, 10s):")
        return GET_NEWS_INTERVAL  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞

    except (IndexError, ValueError):
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /news <—Ç–µ–∫—Å—Ç>")

async def handle_news_interval(update: Update, context: ContextTypes.DEFAULT_TYPE):
    time_str = update.message.text
    try:
        time_interval = int(time_str[:-1])
        time_unit = time_str[-1]

        if time_unit == 's':
            time_interval *= 1
        elif time_unit == 'm':
            time_interval *= 60
        elif time_unit == 'h':
            time_interval *= 3600
        else:
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ s, m –∏–ª–∏ h.")
            return GET_NEWS_INTERVAL

        text = context.user_data["news_text"]
        context.job_queue.run_repeating(send_news, time_interval, chat_id=update.effective_chat.id, data=text, name="news")
        await update.message.reply_text(f"–†–∞—Å—Å—ã–ª–∫–∞ '{text}' –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –∫–∞–∂–¥—ã–µ {time_str}.")
        return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —á–∏—Å–ª–æ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º s, m –∏–ª–∏ h.")
        return GET_NEWS_INTERVAL

async def send_news(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text=context.job.data)

async def newsnow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        text = " ".join(context.args)
        await context.bot.send_message(chat_id=update.effective_chat.id, text=text)
    except IndexError:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /newsnow <—Ç–µ–∫—Å—Ç>")

async def stop_news(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    current_jobs = context.job_queue.get_jobs_by_name("news")
    for job in current_jobs:
        job.schedule_removal()

    await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

async def add_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMINS
    if update.effective_user.id == ADMIN_ID:
        try:
            user_id = int(context.args[0])
            name = ' '.join(context.args[1:])  # –ò–º—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
            if user_id in ADMINS:
                await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                return
            ADMINS[user_id] = name if name else None
            database.add_admin(user_id, name)  # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î
            await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        except (IndexError, ValueError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /addadmin <user_id> [<name>]")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


async def remove_admin(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMINS
    if update.effective_user.id == ADMIN_ID:
        try:
            user_id = int(context.args[0])
            if user_id in ADMINS:
                del ADMINS[user_id]
                database.remove_admin(user_id)  # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
                await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            else:
                await update.message.reply_text("–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
        except (IndexError, ValueError):
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /removeadmin <user_id>")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


async def list_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global ADMINS
    if update.effective_user.id == ADMIN_ID:
        if ADMINS:
            admin_list = "\n".join([f"{user_id} - {name if name else '–ë–µ–∑ –∏–º–µ–Ω–∏'}" for user_id, name in ADMINS.items()])
            await update.message.reply_text(f"–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n{admin_list}")
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç.")
    else:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ ---
def restricted(func):
    async def wrapped(update, context, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id not in ADMINS and user_id != ADMIN_ID:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return
        return await func(update, context, *args, **kwargs)
    return wrapped

def main():
    application = Application.builder().token(BOT_API_TOKEN).job_queue(JobQueue()).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    button_handler = CallbackQueryHandler(button, pattern="set_|repeat_")
    phone_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), handle_phone)

    conv_handler = ConversationHandler(
        entry_points=[button_handler],
        states={
            GET_PHONE: [phone_handler],
        },
        fallbacks=[],
    )

    news_handler = ConversationHandler(
        entry_points=[CommandHandler("news", news)],
        states={
            GET_NEWS_INTERVAL: [MessageHandler(filters.TEXT & (~filters.COMMAND), handle_news_interval)],
        },
        fallbacks=[],
    )
    application.add_handler(news_handler)

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(cancel_button, pattern="cancel_"))

    # –ü—Ä–∏–º–µ—Ä—ã –∫–æ–º–∞–Ω–¥, –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É (ADMIN_ID)
    application.add_handler(CommandHandler("addadmin", add_admin))
    application.add_handler(CommandHandler("removeadmin", remove_admin))
    application.add_handler(CommandHandler("listadmins", list_admins))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("adduser", add_user))
    application.add_handler(CommandHandler("removeuser", remove_user))
    application.add_handler(CommandHandler("listusers", list_users))
    application.add_handler(CommandHandler("startbot", start_bot))
    application.add_handler(CommandHandler("stopbot", stop_bot))
    application.add_handler(CommandHandler("startsim", start_simulation))  
    application.add_handler(CommandHandler("stopsim", stop_simulation))  
    application.add_handler(CommandHandler("clearcount", clear_count))
    application.add_handler(CommandHandler("worker", worker))
    application.add_handler(CommandHandler("removeworker", remove_worker))

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    application.add_handler(CommandHandler("news", news))
    application.add_handler(CommandHandler("newsnow", newsnow))
    application.add_handler(CommandHandler("stopnews", stop_news))

    application.add_handler(CallbackQueryHandler(enable_simulation, pattern="enable_simulation"))

    application.run_polling()

if __name__ == '__main__':
    main()

# Made by Shvyaner :3